import argparse
import yaml
import sys

def parse_resource_string(res_str):
    """Parses strings like 'cpu=100m,memory=64Mi' into a dict."""
    result = {}
    for res in res_str.split(","):
        if "=" in res:
            k, v = res.split("=", 1)
            result[k.strip()] = v.strip()
    return result

def parse_container_arg(container_arg):
    # Parses key=value pairs separated by commas
    parts = container_arg.split(",")
    data = {}
    for part in parts:
        if "=" in part:
            k, v = part.split("=", 1)
            data[k.strip()] = v.strip()
    container = {
        "name": data.get("name"),
        "image": data.get("image"),
    }
    resources = {}
    requests = {}
    limits = {}

    if "requests-memory" in data:
        requests["memory"] = data["requests-memory"]
    if "requests-cpu" in data:
        requests["cpu"] = data["requests-cpu"]
    if "requests" in data:
        requests.update(parse_resource_string(data["requests"]))
    if requests:
        resources["requests"] = requests

    if "limits-memory" in data:
        limits["memory"] = data["limits-memory"]
    if "limits-cpu" in data:
        limits["cpu"] = data["limits-cpu"]
    if "limits" in data:
        limits.update(parse_resource_string(data["limits"]))
    if limits:
        resources["limits"] = limits

    if resources:
        container["resources"] = resources

    return container

def merge_resources(target, default):
    """Add any missing resources from default into target."""
    if not default:
        return target
    if not target:
        return default
    for key in ["requests", "limits"]:
        if key in default:
            if key not in target:
                target[key] = default[key]
            else:
                for res_type in default[key]:
                    if res_type not in target[key]:
                        target[key][res_type] = default[key][res_type]
    return target

def generate_pod_yaml(pod_name, containers, global_resources):
    # Apply global resources to containers missing them
    updated_containers = []
    for c in containers:
        c = c.copy()
        if "resources" in c:
            c["resources"] = merge_resources(c["resources"], global_resources)
        elif global_resources:
            c["resources"] = global_resources
        updated_containers.append(c)

    pod = {
        "apiVersion": "v1",
        "kind": "Pod",
        "metadata": {
            "name": pod_name
        },
        "spec": {
            "containers": updated_containers
        }
    }
    return pod

def main():
    parser = argparse.ArgumentParser(
        description="Convert 'kubectl run' (with custom flags, including multiple containers) to YAML manifest"
    )
    parser.add_argument(
        "cmd",
        nargs=argparse.REMAINDER,
        help="The kubectl run command after 'kubectl' (e.g. run mypod ...)"
    )
    args = parser.parse_args()
    if not args.cmd or args.cmd[0] != "run":
        print("Please start the command with 'run <pod-name>'", file=sys.stderr)
        sys.exit(1)
    if len(args.cmd) < 2:
        print("Pod name is required (e.g. run mypod ...)", file=sys.stderr)
        sys.exit(1)

    pod_name = args.cmd[1]
    containers = []
    global_requests = {}
    global_limits = {}
    i = 2
    while i < len(args.cmd):
        arg = args.cmd[i]
        if arg.startswith("--container="):
            container_arg = arg[len("--container="):]
            container = parse_container_arg(container_arg)
            if not container.get("name") or not container.get("image"):
                print("Each --container must specify name=<name> and image=<image>", file=sys.stderr)
                sys.exit(1)
            containers.append(container)
        elif arg.startswith("--requests="):
            global_requests.update(parse_resource_string(arg[len("--requests="):]))
        elif arg.startswith("--limits="):
            global_limits.update(parse_resource_string(arg[len("--limits="):]))
        elif arg.startswith("--requests-memory="):
            global_requests["memory"] = arg[len("--requests-memory="):]
        elif arg.startswith("--requests-cpu="):
            global_requests["cpu"] = arg[len("--requests-cpu="):]
        elif arg.startswith("--limits-memory="):
            global_limits["memory"] = arg[len("--limits-memory="):]
        elif arg.startswith("--limits-cpu="):
            global_limits["cpu"] = arg[len("--limits-cpu="):]
        i += 1

    if not containers:
        print("At least one --container=name=<name>,image=<image>,... flag is required.", file=sys.stderr)
        sys.exit(1)

    global_resources = {}
    if global_requests:
        global_resources["requests"] = global_requests
    if global_limits:
        global_resources["limits"] = global_limits

    pod_yaml = generate_pod_yaml(pod_name, containers, global_resources)
    print("# YAML manifest generated from imperative command:")
    print(yaml.dump(pod_yaml, sort_keys=False))

if __name__ == "__main__":
    main()
